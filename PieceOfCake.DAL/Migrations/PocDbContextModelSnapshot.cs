// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PieceOfCake.DAL;

#nullable disable

namespace PieceOfCake.DAL.Migrations
{
    [DbContext(typeof(PocDbContext))]
    partial class PocDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DishMealOfTheDayType", b =>
                {
                    b.Property<Guid>("DishesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MealOfTheDayTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DishesId", "MealOfTheDayTypesId");

                    b.HasIndex("MealOfTheDayTypesId");

                    b.ToTable("DishMealOfTheDayType");
                });

            modelBuilder.Entity("DishMenu", b =>
                {
                    b.Property<Guid>("DishesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DishesId", "MenusId");

                    b.HasIndex("MenusId");

                    b.ToTable("DishMenu");
                });

            modelBuilder.Entity("MealOfTheDayTypeMenu", b =>
                {
                    b.Property<Guid>("MealOfTheDayTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MealOfTheDayTypesId", "MenusId");

                    b.HasIndex("MenusId");

                    b.ToTable("MealOfTheDayTypeMenu");
                });

            modelBuilder.Entity("PieceOfCake.Core.DishFeature.Entities.Dish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DishState")
                        .HasColumnType("int")
                        .HasColumnName("State");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("ServingSize")
                        .HasMaxLength(255)
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Dishes", (string)null);
                });

            modelBuilder.Entity("PieceOfCake.Core.DishFeature.Entities.MealOfTheDayType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MealOfTheDayTypes", (string)null);
                });

            modelBuilder.Entity("PieceOfCake.Core.IngredientFeature.Entities.MeasureUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MeasureUnits", (string)null);
                });

            modelBuilder.Entity("PieceOfCake.Core.IngredientFeature.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("PieceOfCake.Core.IngredientFeature.ValueObjects.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MeasureUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DishId");

                    b.HasIndex("MeasureUnitId");

                    b.HasIndex("ProductId");

                    b.ToTable("Ingredients", (string)null);
                });

            modelBuilder.Entity("PieceOfCake.Core.MenuFeature.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Menus", (string)null);
                });

            modelBuilder.Entity("DishMealOfTheDayType", b =>
                {
                    b.HasOne("PieceOfCake.Core.DishFeature.Entities.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PieceOfCake.Core.DishFeature.Entities.MealOfTheDayType", null)
                        .WithMany()
                        .HasForeignKey("MealOfTheDayTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DishMenu", b =>
                {
                    b.HasOne("PieceOfCake.Core.DishFeature.Entities.Dish", null)
                        .WithMany()
                        .HasForeignKey("DishesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PieceOfCake.Core.MenuFeature.Entities.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MealOfTheDayTypeMenu", b =>
                {
                    b.HasOne("PieceOfCake.Core.DishFeature.Entities.MealOfTheDayType", null)
                        .WithMany()
                        .HasForeignKey("MealOfTheDayTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PieceOfCake.Core.MenuFeature.Entities.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PieceOfCake.Core.IngredientFeature.ValueObjects.Ingredient", b =>
                {
                    b.HasOne("PieceOfCake.Core.DishFeature.Entities.Dish", "Dish")
                        .WithMany("Ingredients")
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PieceOfCake.Core.IngredientFeature.Entities.MeasureUnit", "MeasureUnit")
                        .WithMany()
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PieceOfCake.Core.IngredientFeature.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dish");

                    b.Navigation("MeasureUnit");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PieceOfCake.Core.MenuFeature.Entities.Menu", b =>
                {
                    b.OwnsMany("PieceOfCake.Core.MenuFeature.Calendar.CalendarItem", "Calendar", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<DateOnly>("Date")
                                .HasColumnType("date");

                            b1.HasKey("MenuId", "__synthesizedOrdinal");

                            b1.ToTable("Menus");

                            b1.ToJson("Calendar");

                            b1.WithOwner()
                                .HasForeignKey("MenuId");

                            b1.OwnsMany("PieceOfCake.Core.MenuFeature.Calendar.MealOfTheDayTypeInCalendar", "MealOfTheDayTypes", b2 =>
                                {
                                    b2.Property<Guid>("CalendarItemMenuId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<int>("CalendarItem__synthesizedOrdinal")
                                        .HasColumnType("int");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uniqueidentifier");

                                    b2.HasKey("CalendarItemMenuId", "CalendarItem__synthesizedOrdinal", "__synthesizedOrdinal");

                                    b2.ToTable("Menus");

                                    b2.WithOwner()
                                        .HasForeignKey("CalendarItemMenuId", "CalendarItem__synthesizedOrdinal");

                                    b2.OwnsMany("PieceOfCake.Core.MenuFeature.Calendar.DishInCalendar", "Dishes", b3 =>
                                        {
                                            b3.Property<Guid>("MealOfTheDayTypeInCalendarCalendarItemMenuId")
                                                .HasColumnType("uniqueidentifier");

                                            b3.Property<int>("MealOfTheDayTypeInCalendarCalendarItem__synthesizedOrdinal")
                                                .HasColumnType("int");

                                            b3.Property<int>("MealOfTheDayTypeInCalendar__synthesizedOrdinal")
                                                .HasColumnType("int");

                                            b3.Property<int>("__synthesizedOrdinal")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("int");

                                            b3.Property<Guid>("Id")
                                                .HasColumnType("uniqueidentifier");

                                            b3.HasKey("MealOfTheDayTypeInCalendarCalendarItemMenuId", "MealOfTheDayTypeInCalendarCalendarItem__synthesizedOrdinal", "MealOfTheDayTypeInCalendar__synthesizedOrdinal", "__synthesizedOrdinal");

                                            b3.ToTable("Menus");

                                            b3.WithOwner()
                                                .HasForeignKey("MealOfTheDayTypeInCalendarCalendarItemMenuId", "MealOfTheDayTypeInCalendarCalendarItem__synthesizedOrdinal", "MealOfTheDayTypeInCalendar__synthesizedOrdinal");
                                        });

                                    b2.Navigation("Dishes");
                                });

                            b1.Navigation("MealOfTheDayTypes");
                        });

                    b.OwnsOne("PieceOfCake.Core.MenuFeature.ValueObjects.TimePeriod", "Duration", b1 =>
                        {
                            b1.Property<Guid>("MenuId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("EndDate")
                                .HasColumnType("date")
                                .HasColumnName("EndDate");

                            b1.Property<DateOnly>("StartDate")
                                .HasColumnType("date")
                                .HasColumnName("StartDate");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menus", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MenuId");
                        });

                    b.Navigation("Calendar");

                    b.Navigation("Duration")
                        .IsRequired();
                });

            modelBuilder.Entity("PieceOfCake.Core.DishFeature.Entities.Dish", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
